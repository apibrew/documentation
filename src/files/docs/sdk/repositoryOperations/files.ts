
export const repositoryOperationsFiles = {
  "golang": "package main\n\nimport \"github.com/apibrew/apibrew/pkg/client\"\n\n...\n\nrepository := client.Repository[Book](BookMapperInstance)\n\nbook := &Book{\n    Name: \"Book 1\",\n}\n\n// Create new record.\ncreatedBook, err := repository.Create(book)\n\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(createdBook.Id) // it will print id of created record.\n\n// Update record.\n\n// Update name\ncreatedBook.Name = \"Book 2\"\nupdatedBook, err := repository.Update(createdBook)\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// Delete record.\nerr = repository.Delete(updatedBook.Id)\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// Get record by id.\nbookById, err := repository.Get(createdBook.Id)\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// Apply record.\n\nbookToApply := &Book{\n    Name: \"Book 3\",\n}\n\nappliedBook, err := repository.Apply(bookToApply)\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// List records.\nbooks, err := repository.List()\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// You can also use query to filter records.\nbooks, err := repository.List(&ListRecordParams{\n    Query: client.BooleanExpressionBuilder.Eq(\"description\", \"Test Book\"),\n    resolveReferences: [\"$.author\"], // it will preload author reference\n    Limit: 2,\n    Offset: 1,\n})\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// Load record.\nloadedBook, err := repository.Load(book)\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// Watch record.\nrepository.Watch(func(event *client.RecordEvent) {\n    fmt.Println(event)\n})",
  "java": "import io.apibrew.client.Client;\nimport io.apibrew.client.EntityInfo;\nimport io.apibrew.client.Repository;\nimport io.apibrew.client.model.Resource;\n\n...\n\nRepository<Book> repository = client.repository(Book.class);\n\nBook book = new Book();\nbook.setName(\"Book 1\");\nbook.setDescription(\"Description 1\");\n\n// Create new record.\nBook createdBook = repository.create(book);\n\nSystem.out.println(createdBook.getId()); // it will print id of created record.\n\n// Update record.\n\n// Update name\ncreatedBook.setName(\"Book 2\");\nBook updatedBook = repository.update(createdBook);\n\n// Delete record.\nrepository.delete(updatedBook.getId());\n\n// Get record by id.\nBook bookById = repository.get(createdBook.getId());\n\n// Apply record.\nBook bookToApply = new Book();\nbookToApply.setName(\"Book 3\");\nbookToApply.setDescription(\"Description 3\");\n\nBook appliedBook = repository.apply(bookToApply);\n\n// List records.\nList<Book> books = repository.list();\n\n// You can also use query to filter records.\nList<Book> books = repository.list(ListRecordParams.builder()\n                        .query(BooleanExpressionBuilder.eq(\"description\", \"Test Book\"))\n                        .resolveReferences(\"$.author\") // it will preload author reference\n                        .limit(2)\n                        .offset(1)\n                        .build());\n// Load record.\nBook loadedBook = repository.load(book);\n\n// Watch record.\nrepository.watch((event) -> {\n    System.out.println(event);\n});",
  "javascript": "import {Client, Repository, GenericRecord} from '@apibrew/client';\n\n// ... //\n\nconst repository = client.repository(BookEntityInfo);\n\nconst book = {\n  name: 'Book 1',\n  description: 'Description 1'\n}\n\n// Create new record.\nconst createdBook = await repository.create(book);\n\nconsole.log(createdBook.id); // it will print id of created record.\n\n// Update record.\n\n// Update name\ncreatedBook.name = 'Book 2';\nconst updatedBook = await repository.update(createdBook);\n\n// Delete record.\nawait repository.delete(updatedBook.id);\n\n// Get record by id.\nconst bookById = await repository.get(createdBook.id);\n\n// Apply record.\nconst bookToApply = {\n  name: 'Book 3',\n  description: 'Description 3'\n}\n\nconst appliedBook = await repository.apply(bookToApply);\n\n// List records.\nconst books = await repository.list();\n\n// You can also use query to filter records.\nconst books = await repository.list({\n  query: BooleanExpressionBuilder.eq('description', 'Test Book'),\n  resolveReferences: [\"$.author\"], // it will preload author reference\n  limit: 2,\n  offset: 1\n});\n\n// Load record.\nconst loadedBook = await repository.load(book);\n\n// Watch record.\nrepository.watch((event) => {\n  console.log(event);\n});",
  "python": "from apibrew import Client, Repository, GenericRecord, BooleanExpressionBuilder\n\n...\n\nrepository = client.repository(Book)\n\nbook = Book()\nbook.name = \"Book 1\"\n\n# Create new record.\ncreated_book = repository.create(book)\n\nprint(created_book.id) # it will print id of created record.\n\n# Update record.\n\n# Update name\ncreated_book.name = \"Book 2\"\nupdated_book = repository.update(created_book)\n\n# Delete record.\nrepository.delete(updated_book.id)\n\n# Get record by id.\nbook_by_id = repository.get(created_book.id)\n\n# Apply record.\nbook_to_apply = Book()\nbook_to_apply.name = \"Book 3\"\n\napplied_book = repository.apply(book_to_apply)\n\n# List records.\nbooks = repository.list()\n\n# You can also use query to filter records.\nbooks = repository.list({\n  'query': BooleanExpressionBuilder.eq('description', 'Test Book'),\n  resolveReferences: [\"$.author\"], // it will preload author reference\n  'limit': 2,\n  'offset': 1\n})\n\n# Load record.\nloaded_book = repository.load(book)\n\n# Watch record.\n\ndef watchBook(event):\n    print(event)\n\nrepository.watch(watchBook)",
  "react": "import {Client, Repository, GenericRecord, BooleanExpressionBuilder} from '@apibrew/client';\n\n// ... //\n\nconst repository = useRepository<Book>(BookEntityInfo);\n\nconst book = {\n  name: 'Book 1',\n  description: 'Description 1'\n}\n\n// Create new record.\nconst createdBook = await repository.create(book);\n\nconsole.log(createdBook.id); // it will print id of created record.\n\n// Update record.\n\n// Update name\ncreatedBook.name = 'Book 2';\nconst updatedBook = await repository.update(createdBook);\n\n// Delete record.\nawait repository.delete(updatedBook.id);\n\n// Get record by id.\nconst bookById = await repository.get(createdBook.id);\n\n// Apply record.\nconst bookToApply = {\n  name: 'Book 3',\n  description: 'Description 3'\n}\n\nconst appliedBook = await repository.apply(bookToApply);\n\n// List records.\nconst books = await repository.list();\n\n// You can also use query to filter records.\nconst books = await repository.list({\n  query: BooleanExpressionBuilder.eq('description', 'Test Book'),\n  resolveReferences: [\"$.author\"], // it will preload author reference\n  limit: 2,\n  offset: 1\n});\n\n// Load record.\nconst loadedBook = await repository.load(book);"
};
  

export const storageFiles = {
  "golang": "package main\n\nimport \"github.com/apibrew/apibrew/pkg/client\"\n\n...\n\nclient := client.NewClient()\n\n// hosted extension service\nextensionService := client.NewHostedExtensionService(\"test-service-name\", \"extension-service-host\", 8080, \"http://test-service-host-proxy:8080\")\n\n// poller extension service\nextensionService := client.NewPollerExtensionService(\"test-service\", \"test-service-chan\")\n\n// handler codes\n\n// If you want to run extensionService in foreground\nextensionService.Run()\n\n// If you want to run extensionService in background\nextensionService.RunAsync()",
  "java": "import io.apibrew.client.Client;\nimport io.apibrew.client.storage.StorageService;\nimport io.apibrew.client.storage.impl.StorageServiceImpl;\nimport io.apibrew.client.storage.model.StorageObject;\n\nimport java.io.File;\nimport java.io.FileInputStream;\n\n...\n\nClient client = Client.newClient();\n\nStorageService storageService = new StorageServiceImpl(client, \"https://storage.apibrew.io:8443/<your-project-id>\");\n\n// Uploading file\n\n// First you need to create new StorageObject\nStorageObject storageObject = new StorageObject();\n\nstorageObject = storageService.repository().create(storageObject);\n\n// Then you can upload file\n// There are multiple ways to upload file\n// 1. From byte array\nstorageService.uploadBytes(storageObject.getId(), new byte[]{1, 2, 3}, \"test.txt\");\n\n// 2. From byte array with mime type\nstorageService.uploadBytes(storageObject.getId(), new byte[]{1, 2, 3}, \"test.txt\", \"text/plain\");\n\n// 3. From file\nstorageService.uploadFile(storageObject.getId(), new File(\"test.txt\"));\n\n// 4. From file with mime type\nstorageService.uploadFile(storageObject.getId(), new File(\"test.txt\"), \"text/plain\");\n\n// 5. From input stream\ntry (FileInputStream fis = new FileInputStream(\"text.txt\")) {\n    storageService.uploadStream(storageObject.getId(), fis, \"test.txt\");\n}\n\n// 6. From input stream with mime type\ntry (FileInputStream fis = new FileInputStream(\"text.txt\")) {\n    storageService.uploadStream(storageObject.getId(), fis, \"test.txt\", \"text/plain\");\n}\n\n// Downloading file\n\n// 1. To byte array\nbyte[] bytes = storageService.downloadBytes(storageObject.getId());\n\n// 2. To file\nstorageService.downloadFile(storageObject.getId(), \"test.txt\");",
  "javascript": "import {Client} from '@apibrew/client';\nimport {StorageServiceImpl} from \"@apibrew/client/storage/impl/storage-service-impl\";\n\n// ...  //\n\nconst client = Client.newClient();\n\n\nconst storageService = new StorageServiceImpl(client, \"https://storage.apibrew.io:8443/<your-project-id>\");\n\n// Uploading file\n\n// First you need to create new StorageObject\nlet storageObject = {}\n\nstorageObject = await storageService.repository().create(storageObject);\n\n// Then you can upload file\n// There are multiple ways to upload file\n// 1. From byte array\nawait storageService.uploadBytes(storageObject.getId(), Buffer.from([1,2,3,4]), \"test.txt\");\n\n// 2. From file\nawait storageService.uploadFile(storageObject.getId(), \"test.txt\");\n\n// Downloading file\n\n// 1. To byte array\nconst bytesBuffer = storageService.downloadBytes(storageObject.getId());\n\n// 2. To file\nawait storageService.downloadFile(storageObject.getId(), \"test.txt\");",
  "python": "from apibrew import Client\nfrom apibrew.ext import HostedExtensionServiceImpl, PollerExtensionService\n\n...\n\nclient = Client.new_client()\n\nstorage_service = StorageServiceImpl(client, \"https://storage.apibrew.io:8443/<your-project-id>\")\n\n# Uploading file\n\n# First you need to create a new StorageObject\nstorage_object = {}\n\nstorage_object = storage_service.repository().create(storage_object)\n\n# Then you can upload file\n# There are multiple ways to upload file\n\n# 1. From byte array\nbyte_array = bytes([1, 2, 3, 4])\nstorage_service.upload_bytes(storage_object[\"id\"], byte_array, \"test.txt\")\n\n# 2. From file\nfile_path = \"test.txt\"\nstorage_service.upload_file(storage_object[\"id\"], file_path)\n\n# Downloading file\n\n# 1. To byte array\nbytes_buffer = storage_service.download_bytes(storage_object[\"id\"])\n\n# 2. To file\nstorage_service.download_file(storage_object[\"id\"], \"test.txt\")"
};
  
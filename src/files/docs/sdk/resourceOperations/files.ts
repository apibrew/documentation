
export const resourceOperationsFiles = {
  "golang": "package main\n\nimport \"github.com/apibrew/apibrew/pkg/client\"\nimport \"github.com/apibrew/apibrew/pkg/model\"\n\nfunc main() {\n    client := client.NewClient()\n\n    // Create new resource.\n    resource := &model.Resource{\n        Name: \"Person\",\n        Properties: []model.Property{\n            {Name: \"name\", Type: \"string\", Required: true},\n            {Name: \"description\", Type: \"string\"},\n        },\n    }\n\n    createdResource, err := client.CreateResource(resource)\n\n    // Get resource by name.\n    resourceByName, err := client.GetResourceByName(\"default\", \"Person\")\n\n    // Update resource.\n    resourceByName.Properties = append(resourceByName.Properties, model.Property{Name: \"age\", Type: \"int32\"})\n    updatedResource, err := client.UpdateResource(resourceByName)\n\n    // List resources.\n    resources, err := client.ListResources()\n\n    // Get resource by id.\n    resourceById, err := client.GetResourceById(createdResource.Id)\n\n    // Delete resource.\n    err := client.DeleteResource(resource)\n\n    // Apply resource.\n    appliedResource, err := client.ApplyResource(resource)\n}",
  "java": "import io.apibrew.client.Client;\nimport io.apibrew.client.model.Resource;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Application {\n\n    public static void main(String[] args) {\n        Client client = Client.newClient();\n\n        // Create new resource.\n        Resource resource = new Resource();\n        resource.setName(\"Person\");\n\n        List<Resource.Property> properties = new ArrayList<>();\n        properties.add(new Resource.Property().withName(\"name\").withType(Resource.Type.STRING).withRequired(true));\n        properties.add(new Resource.Property().withName(\"description\").withType(Resource.Type.STRING));\n\n        resource.setProperties(properties);\n\n        Resource createdResource = client.CreateResource(resource);\n\n        // Get resource by name.\n        Resource resourceByName = client.GetResourceByName(\"default\", \"Person\");\n\n        // Update resource.\n        resourceByName.getProperties().add(new Resource.Property().withName(\"age\").withType(Resource.Type.INT32));\n\n        Resource updatedResource = client.UpdateResource(resourceByName);\n\n        // List resources.\n        List<Resource> resources = client.listResources();\n\n        // Get resource by id.\n        Resource resourceById = client.GetResourceById(createdResource.getId());\n\n        // Delete resource.\n        client.DeleteResource(resource);\n\n        // Apply resource.\n        Resource appliedResource = client.ApplyResource(resource);\n    }\n}",
  "javascript": "import {Client} from '@apibrew/client';\n\nconst client = Client.newClient();\n\n// Create new resource.\nconst resource = {\n  name: 'Person',\n  properties: [\n    {name: 'name', type: 'string', required: true},\n    {name: 'description', type: 'string'},\n  ]\n}\n\nconst createdResource = await client.createResource(resource);\n\n// Get resource by name.\nconst resourceByName = await client.getResourceByName('default', 'Person');\n\n// Update resource.\nresourceByName.properties.push({name: 'age', type: 'int32'});\nconst updatedResource = await client.updateResource(resourceByName);\n\n// List resources.\nconst resources = await client.listResources();\n\n// Get resource by id.\nconst resourceById = await client.getResourceById(createdResource.id);\n\n// Delete resource.\nawait client.deleteResource(resource);\n\n// Apply resource.\nconst appliedResource = await client.applyResource(resource);",
  "python": "from apibrew import Client\n\nclient = Client.new_client()\n\n# Create new resource.\nresource = {\n  'name': 'Person',\n  'properties': [\n    {'name': 'name', 'type': 'string', 'required': True},\n    {'name': 'description', 'type': 'string'},\n  ]\n}\n\ncreated_resource = client.create_resource(resource)\n\n# Get resource by name.\nresource_by_name = client.get_resource_by_name('default', 'Person')\n\n# Update resource.\nresource_by_name['properties'].append({'name': 'age', 'type': 'int32'})\nupdated_resource = client.update_resource(resource_by_name)\n\n# List resources.\nresources = client.list_resources()\n\n# Get resource by id.\nresource_by_id = client.get_resource_by_id(created_resource['id'])\n\n# Delete resource.\nclient.delete_resource(resource)\n\n# Apply resource.\napplied_resource = client.apply_resource(resource)",
};
  